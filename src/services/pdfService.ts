import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { Trip } from '../types';

export class PDFService {
  async generateTripPDF(trip: Trip) {
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(59, 130, 246); // Primary blue
      pdf.text('TravelHelperAI', 20, 25);
      
      pdf.setFontSize(20);
      pdf.setTextColor(0, 0, 0);
      pdf.text(trip.title, 20, 40);
      
      // Trip details
      pdf.setFontSize(12);
      pdf.text(`Destination: ${trip.destination}`, 20, 55);
      pdf.text(`Dates: ${trip.startDate} to ${trip.endDate}`, 20, 65);
      pdf.text(`Travelers: ${trip.travelers}`, 20, 75);
      pdf.text(`Budget: $${trip.budget}`, 20, 85);
      
      let yPosition = 100;
      
      // Itinerary
      if (trip.itinerary && trip.itinerary.length > 0) {
        pdf.setFontSize(16);
        pdf.setTextColor(59, 130, 246);
        pdf.text('Daily Itinerary', 20, yPosition);
        yPosition += 15;
        
        trip.itinerary.forEach((day, index) => {
          if (yPosition > pageHeight - 40) {
            pdf.addPage();
            yPosition = 20;
          }
          
          pdf.setFontSize(14);
          pdf.setTextColor(0, 0, 0);
          pdf.text(`Day ${day.day} - ${day.date}`, 20, yPosition);
          yPosition += 10;
          
          // Activities
          if (day.activities && day.activities.length > 0) {
            pdf.setFontSize(10);
            day.activities.forEach(activity => {
              if (yPosition > pageHeight - 20) {
                pdf.addPage();
                yPosition = 20;
              }
              
              pdf.text(`â€¢ ${activity.timeSlot}: ${activity.name}`, 25, yPosition);
              yPosition += 5;
              if (activity.description) {
                const lines = pdf.splitTextToSize(`  ${activity.description}`, pageWidth - 50);
                pdf.text(lines, 25, yPosition);
                yPosition += lines.length * 5;
              }
              yPosition += 3;
            });
          }
          
          yPosition += 10;
        });
      }
      
      // Footer
      const totalPages = pdf.internal.pages.length - 1;
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setTextColor(128, 128, 128);
        pdf.text(`Generated by TravelHelperAI - Page ${i} of ${totalPages}`, 20, pageHeight - 10);
        pdf.text(new Date().toLocaleDateString(), pageWidth - 40, pageHeight - 10);
      }
      
      return pdf;
    } catch (error) {
      console.error('PDF generation error:', error);
      throw new Error('Failed to generate PDF');
    }
  }

  async downloadTripPDF(trip: Trip) {
    try {
      const pdf = await this.generateTripPDF(trip);
      pdf.save(`${trip.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_itinerary.pdf`);
    } catch (error) {
      console.error('PDF download error:', error);
      throw new Error('Failed to download PDF');
    }
  }

  async generateTripFromElement(elementId: string, filename: string) {
    try {
      const element = document.getElementById(elementId);
      if (!element) throw new Error('Element not found');

      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      pdf.save(filename);
    } catch (error) {
      console.error('Element to PDF error:', error);
      throw new Error('Failed to generate PDF from element');
    }
  }
}

export const pdfService = new PDFService();